<Project>
  <!-- When running dotnet test, disable analyzers to compile faster and get feedback earlier -->
  <!-- This assume that most CI uses an actual dotnet build/publish/pack in parallel of dotnet test -->
  <PropertyGroup>
    <IsPackable>false</IsPackable>
  </PropertyGroup>
  
  <Target Name="DisableAnalyzerWhenRunningTests" BeforeTargets="VSTest;_MTPBuild" Condition="'$(OptimizeVsTestRun)' != 'false'">
    <PropertyGroup>
      <RunAnalyzers>false</RunAnalyzers>
    </PropertyGroup>
  </Target>

  <Choose>
    <When Condition="'$(UseMicrosoftTestingPlatform)' == 'true'">
      <ItemGroup>
        <PackageReference Include="Microsoft.Testing.Extensions.CrashDump" Version="1.8.4" IsImplicitlyDefined="true" />
        <PackageReference Include="Microsoft.Testing.Extensions.CodeCoverage" Version="17.14.2" IsImplicitlyDefined="true" />
        <PackageReference Include="Microsoft.Testing.Extensions.HangDump" Version="1.8.4" IsImplicitlyDefined="true" />
        <PackageReference Include="Microsoft.Testing.Extensions.HotReload" Version="1.8.4" IsImplicitlyDefined="true" />
        <PackageReference Include="Microsoft.Testing.Extensions.Retry" Version="1.8.4" IsImplicitlyDefined="true" />
        <PackageReference Include="Microsoft.Testing.Extensions.TrxReport" Version="1.8.4" IsImplicitlyDefined="true" />
      </ItemGroup>

      <PropertyGroup Condition="'$(EnableDefaultTestSettings)' != 'false'">
        <TestingPlatformCommandLineArguments>$(TestingPlatformCommandLineArguments) --report-trx</TestingPlatformCommandLineArguments>
        <TestingPlatformCommandLineArguments>$(TestingPlatformCommandLineArguments) --coverage</TestingPlatformCommandLineArguments>
        <TestingPlatformCommandLineArguments>$(TestingPlatformCommandLineArguments) --crashdump --crashdump-type mini</TestingPlatformCommandLineArguments>
        <TestingPlatformCommandLineArguments>$(TestingPlatformCommandLineArguments) --hangdump --hangdump-timeout 10m --hangdump-type mini</TestingPlatformCommandLineArguments>
        <TestingPlatformCommandLineArguments>$(TestingPlatformCommandLineArguments) --minimum-expected-tests 1</TestingPlatformCommandLineArguments>
      </PropertyGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.14.1" IsImplicitlyDefined="true" />
      </ItemGroup>
      
      <PropertyGroup Condition="'$(EnableDefaultTestSettings)' != 'false'">
        <VSTestBlame>true</VSTestBlame>

        <VSTestBlameCrash>true</VSTestBlameCrash>
        <VSTestBlameCrashDumpType>mini</VSTestBlameCrashDumpType>

        <VSTestBlameHang>true</VSTestBlameHang>
        <VSTestBlameHangDumpType>mini</VSTestBlameHangDumpType>
        <VSTestBlameHangTimeout>10min</VSTestBlameHangTimeout>

         <VSTestCollect>Code Coverage</VSTestCollect> 
        <VSTestSetting>$(MSBuildThisFileDirectory)..\configuration\default.runsettings</VSTestSetting>
      </PropertyGroup>

      <PropertyGroup>
        <VSTestLogger Condition="'$(VSTestLogger)' != ''">$(VSTestLogger);</VSTestLogger>
        <VSTestLogger>$(VSTestLogger)trx;console%3bverbosity=detailed</VSTestLogger>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  
  <!-- Add implicit using for xunit -->
  <Target Name="_AddXunitUsingWhenPackageIsDetected" BeforeTargets="BeforeBuild">
    <ItemGroup Condition="'$(ImplicitUsings)' == 'enable' AND (@(PackageReference->AnyHaveMetadataValue('Identity', 'xunit')) == 'true' OR @(PackageReference->AnyHaveMetadataValue('Identity', 'xunit.v3')) == 'true')">
      <Using Include="Xunit" />
    </ItemGroup>
  </Target>
  
  <!-- VSTest on GitHub -->
  <Choose>
    <When Condition="'$(_IsGitHubActions)' == 'true'">
      <PropertyGroup>
        <VSTestLogger>$(VSTestLogger);GitHubActions</VSTestLogger>
      </PropertyGroup>

      <ItemGroup>
        <PackageReference Include="GitHubActionsTestLogger" Version="2.4.1" IsImplicitlyDefined="true">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
      </ItemGroup>
    </When>
  </Choose>
</Project>